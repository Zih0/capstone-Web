{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport * as React from 'react';\nimport RcTextArea from 'rc-textarea';\nimport omit from 'omit.js';\nimport classNames from 'classnames';\nimport ClearableLabeledInput from './ClearableLabeledInput';\nimport { ConfigConsumer } from '../config-provider';\nimport { fixControlledValue, resolveOnChange } from './Input';\nimport SizeContext from '../config-provider/SizeContext';\n\nvar TextArea = /*#__PURE__*/function (_React$Component) {\n  _inherits(TextArea, _React$Component);\n\n  var _super = _createSuper(TextArea);\n\n  function TextArea(props) {\n    var _this;\n\n    _classCallCheck(this, TextArea);\n\n    _this = _super.call(this, props);\n\n    _this.focus = function () {\n      _this.resizableTextArea.textArea.focus();\n    };\n\n    _this.saveTextArea = function (textarea) {\n      _this.resizableTextArea = textarea === null || textarea === void 0 ? void 0 : textarea.resizableTextArea;\n    };\n\n    _this.saveClearableInput = function (clearableInput) {\n      _this.clearableInput = clearableInput;\n    };\n\n    _this.handleChange = function (e) {\n      _this.setValue(e.target.value);\n\n      resolveOnChange(_this.resizableTextArea.textArea, e, _this.props.onChange);\n    };\n\n    _this.handleReset = function (e) {\n      _this.setValue('', function () {\n        _this.focus();\n      });\n\n      resolveOnChange(_this.resizableTextArea.textArea, e, _this.props.onChange);\n    };\n\n    _this.renderTextArea = function (prefixCls, bordered, size) {\n      var _classNames;\n\n      var _this$props = _this.props,\n          showCount = _this$props.showCount,\n          className = _this$props.className,\n          style = _this$props.style,\n          customizeSize = _this$props.size;\n      return /*#__PURE__*/React.createElement(RcTextArea, _extends({}, omit(_this.props, ['allowClear', 'bordered', 'showCount', 'size']), {\n        className: classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-borderless\"), !bordered), _defineProperty(_classNames, className, className && !showCount), _defineProperty(_classNames, \"\".concat(prefixCls, \"-sm\"), size === 'small' || customizeSize === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-lg\"), size === 'large' || customizeSize === 'large'), _classNames)),\n        style: showCount ? null : style,\n        prefixCls: prefixCls,\n        onChange: _this.handleChange,\n        ref: _this.saveTextArea\n      }));\n    };\n\n    _this.renderComponent = function (_ref) {\n      var getPrefixCls = _ref.getPrefixCls,\n          direction = _ref.direction;\n\n      var _a;\n\n      var value = fixControlledValue((_a = _this.state) === null || _a === void 0 ? void 0 : _a.value);\n      var _this$props2 = _this.props,\n          customizePrefixCls = _this$props2.prefixCls,\n          _this$props2$bordered = _this$props2.bordered,\n          bordered = _this$props2$bordered === void 0 ? true : _this$props2$bordered,\n          _this$props2$showCoun = _this$props2.showCount,\n          showCount = _this$props2$showCoun === void 0 ? false : _this$props2$showCoun,\n          maxLength = _this$props2.maxLength,\n          className = _this$props2.className,\n          style = _this$props2.style;\n      var prefixCls = getPrefixCls('input', customizePrefixCls); // Max length value\n\n      var hasMaxLength = Number(maxLength) > 0;\n      value = hasMaxLength ? value.slice(0, maxLength) : value; // TextArea\n\n      var textareaNode = function textareaNode(size) {\n        return /*#__PURE__*/React.createElement(ClearableLabeledInput, _extends({}, _this.props, {\n          prefixCls: prefixCls,\n          direction: direction,\n          inputType: \"text\",\n          value: value,\n          element: _this.renderTextArea(prefixCls, bordered, size),\n          handleReset: _this.handleReset,\n          ref: _this.saveClearableInput,\n          triggerFocus: _this.focus,\n          bordered: bordered\n        }));\n      }; // Only show text area wrapper when needed\n\n\n      if (showCount) {\n        var valueLength = _toConsumableArray(value).length;\n\n        var dataCount = \"\".concat(valueLength).concat(hasMaxLength ? \" / \".concat(maxLength) : '');\n        return /*#__PURE__*/React.createElement(SizeContext.Consumer, null, function (size) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: classNames(\"\".concat(prefixCls, \"-textarea\"), _defineProperty({}, \"\".concat(prefixCls, \"-textarea-rtl\"), direction === 'rtl'), \"\".concat(prefixCls, \"-textarea-show-count\"), className),\n            style: style,\n            \"data-count\": dataCount\n          }, textareaNode(size));\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(SizeContext.Consumer, null, textareaNode);\n    };\n\n    var value = typeof props.value === 'undefined' ? props.defaultValue : props.value;\n    _this.state = {\n      value: value,\n      // eslint-disable-next-line react/no-unused-state\n      prevValue: props.value\n    };\n    return _this;\n  }\n\n  _createClass(TextArea, [{\n    key: \"setValue\",\n    value: function setValue(value, callback) {\n      if (this.props.value === undefined) {\n        this.setState({\n          value: value\n        }, callback);\n      }\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.resizableTextArea.textArea.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(ConfigConsumer, null, this.renderComponent);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, _ref2) {\n      var prevValue = _ref2.prevValue;\n      var newState = {\n        prevValue: nextProps.value\n      };\n\n      if (nextProps.value !== undefined || prevValue !== nextProps.value) {\n        newState.value = nextProps.value;\n      }\n\n      return newState;\n    }\n  }]);\n\n  return TextArea;\n}(React.Component);\n\nexport default TextArea;","map":null,"metadata":{},"sourceType":"module"}