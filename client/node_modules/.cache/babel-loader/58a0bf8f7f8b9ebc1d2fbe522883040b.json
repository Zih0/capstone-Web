{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar getPrototypeOf = require('../internals/object-get-prototype-of');\n\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\nvar create = require('../internals/object-create');\n\nvar defineProperty = require('../internals/object-define-property');\n\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nvar iterate = require('../internals/iterate');\n\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nvar InternalStateModule = require('../internals/internal-state');\n\nvar setInternalState = InternalStateModule.set;\nvar getInternalAggregateErrorState = InternalStateModule.getterFor('AggregateError');\n\nvar $AggregateError = function AggregateError(errors, message) {\n  var that = this;\n  if (!(that instanceof $AggregateError)) return new $AggregateError(errors, message);\n\n  if (setPrototypeOf) {\n    that = setPrototypeOf(new Error(message), getPrototypeOf(that));\n  }\n\n  var errorsArray = [];\n  iterate(errors, errorsArray.push, errorsArray);\n  if (DESCRIPTORS) setInternalState(that, {\n    errors: errorsArray,\n    type: 'AggregateError'\n  });else that.errors = errorsArray;\n  if (message !== undefined) createNonEnumerableProperty(that, 'message', String(message));\n  return that;\n};\n\n$AggregateError.prototype = create(Error.prototype, {\n  constructor: createPropertyDescriptor(5, $AggregateError),\n  message: createPropertyDescriptor(5, ''),\n  name: createPropertyDescriptor(5, 'AggregateError')\n});\nif (DESCRIPTORS) defineProperty.f($AggregateError.prototype, 'errors', {\n  get: function get() {\n    return getInternalAggregateErrorState(this).errors;\n  },\n  configurable: true\n});\n$({\n  global: true\n}, {\n  AggregateError: $AggregateError\n});","map":null,"metadata":{},"sourceType":"script"}