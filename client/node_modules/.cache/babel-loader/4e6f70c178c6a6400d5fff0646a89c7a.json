{"ast":null,"code":"var _jsxFileName = \"/Users/ziho/testapp2/capstoneWeb/client/src/utils/VideoUpload.js\";\nimport React, { useState, useRef, useCallback } from 'react';\nimport Webcam from 'react-webcam';\nimport { Progress, Button, Typography } from 'antd';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nconst {\n  Title\n} = Typography;\n\nconst VideoUpload = props => {\n  const user = useSelector(state => state.user);\n  const [percent, setPercent] = useState(0);\n  const webcamRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const [capturing, setCapturing] = useState(false);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const [video, setVideo] = useState('');\n  const [imgSrc, setImgSrc] = useState(null);\n\n  const StartCaptureClickHandler = () => {\n    setCapturing(true);\n    mediaRecorderRef.current = new MediaRecorder(webcamRef.current.stream, {\n      mimeType: 'video/webm'\n    });\n    mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n    mediaRecorderRef.current.start();\n    let percentage = percent;\n    const timer = setInterval(() => {\n      percentage = percentage + 1;\n      setPercent(percentage);\n\n      if (percentage >= 100) {\n        setCapturing(false);\n        mediaRecorderRef.current.stop();\n        console.log(recordedChunks);\n        SaveHandler(recordedChunks);\n        props.updateStartHandler(false);\n        clearInterval(timer);\n      }\n    }, 100);\n  };\n\n  const handleDataAvailable = useCallback(({\n    data\n  }) => {\n    if (data.size > 0) {\n      setRecordedChunks(prev => prev.concat(data));\n    }\n  }, [setRecordedChunks]);\n\n  const SaveHandler = file => {\n    if (recordedChunks.length) {\n      const blob = new Blob(recordedChunks, {\n        type: \"video/webm\"\n      });\n      let formData = new FormData();\n      const config = {\n        header: {\n          'content-type': 'multipart/form-data'\n        }\n      };\n      formData.append('studentid', user.userData.studentId);\n      formData.append('file', blob);\n      console.log(recordedChunks);\n      console.log(blob);\n      axios.post('/api/datas/uploadfile', formData, config).then(response => {\n        if (response.data.success) {\n          setVideo(response.data.filePath);\n          props.saveVideoHandler(response.data.filePath);\n        } else {\n          alert('파일을 저장하는데 실패했습니다.');\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"\\uC601\\uC0C1 \\uB4F1\\uB85D\"), /*#__PURE__*/React.createElement(Webcam, {\n    audio: false,\n    ref: webcamRef,\n    height: 230,\n    screenshotFormat: \"video/webm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), capturing ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \" \\uB179\\uD654\\uC911 \\uD83D\\uDCF9 \") : /*#__PURE__*/React.createElement(Button, {\n    onClick: StartCaptureClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"\\uC601\\uC0C1\\uB179\\uD654\\uC2DC\\uC791\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '300px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Progress, {\n    percent: percent,\n    showInfo: false,\n    strokeWidth: 13,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  })), recordedChunks.length && /*#__PURE__*/React.createElement(\"video\", {\n    controls: true,\n    width: \"250\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"source\", {\n    src: recordedChunks,\n    type: \"video/webm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default VideoUpload;","map":{"version":3,"sources":["/Users/ziho/testapp2/capstoneWeb/client/src/utils/VideoUpload.js"],"names":["React","useState","useRef","useCallback","Webcam","Progress","Button","Typography","axios","useSelector","Title","VideoUpload","props","user","state","percent","setPercent","webcamRef","mediaRecorderRef","capturing","setCapturing","recordedChunks","setRecordedChunks","video","setVideo","imgSrc","setImgSrc","StartCaptureClickHandler","current","MediaRecorder","stream","mimeType","addEventListener","handleDataAvailable","start","percentage","timer","setInterval","stop","console","log","SaveHandler","updateStartHandler","clearInterval","data","size","prev","concat","file","length","blob","Blob","type","formData","FormData","config","header","append","userData","studentId","post","then","response","success","filePath","saveVideoHandler","alert","width"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport Webcam from 'react-webcam';\nimport { Progress, Button, Typography } from 'antd';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\n\n\nconst { Title } = Typography;\n\nconst VideoUpload = (props) => {\n  const user = useSelector((state) => state.user);\n  const [percent, setPercent] = useState(0);\n  const webcamRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const [capturing, setCapturing] = useState(false);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const [video, setVideo] = useState('');\n  const [imgSrc, setImgSrc] = useState(null);\n  const StartCaptureClickHandler = () => {\n    setCapturing(true);\n    mediaRecorderRef.current = new MediaRecorder(webcamRef.current.stream, {\n      mimeType: 'video/webm',\n    });\n    mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n    mediaRecorderRef.current.start();\n\n\n    let percentage = percent;\n    const timer = setInterval(() => {\n      percentage = percentage + 1;\n      setPercent(percentage);\n      if (percentage >= 100) {\n        setCapturing(false);\n        mediaRecorderRef.current.stop();\n        console.log(recordedChunks);\n        \n        SaveHandler(recordedChunks);\n        props.updateStartHandler(false);\n        clearInterval(timer);\n      }\n    }, 100);\n  };\n\n  const handleDataAvailable = useCallback(\n    ({ data }) => {\n      if (data.size > 0) {\n        setRecordedChunks((prev) => prev.concat(data));\n      }\n    },\n    [setRecordedChunks]\n  );\n\n  const SaveHandler = (file) => {\n    if (recordedChunks.length) {\n      const blob = new Blob(recordedChunks, {\n        type: \"video/webm\"\n      });\n    \n    let formData = new FormData();\n    const config = {\n      header: { 'content-type': 'multipart/form-data' },\n    };\n    formData.append('studentid', user.userData.studentId);\n    formData.append('file', blob);\n    console.log(recordedChunks);\n    console.log(blob);\n    \n    axios.post('/api/datas/uploadfile', formData, config).then((response) => {\n      if (response.data.success) {\n        setVideo(response.data.filePath);\n        props.saveVideoHandler(response.data.filePath);\n        \n      } else {\n        alert('파일을 저장하는데 실패했습니다.');\n      }\n    });\n  }\n  };\n\n  \n\n\n  return (\n    <>\n      <div className=\"app\">\n        <Title>영상 등록</Title>\n        <Webcam\n          audio={false}\n          ref={webcamRef}\n          height={230}\n          screenshotFormat=\"video/webm\"\n        />\n        <br />\n        {capturing ? (\n          <p> 녹화중 📹 </p>\n        ) : (\n          <Button onClick={StartCaptureClickHandler}>영상녹화시작</Button>\n        )}\n        <br />\n        <div style={{ width: '300px' }}>\n          <Progress percent={percent} showInfo={false} strokeWidth={13} />\n        </div>\n        {recordedChunks.length && (\n        <video controls width=\"250\">\n          <source src={recordedChunks}\n            type=\"video/webm\" />\n        </video>\n      )}\n      </div>\n    </>\n  );\n};\n\nexport default VideoUpload;\n"]},"metadata":{},"sourceType":"module"}